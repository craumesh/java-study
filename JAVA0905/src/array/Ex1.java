package array;

import java.util.Arrays;

public class Ex1 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		/*
		 * 배열
		 * - 같은 타입 데이터 여러 개를 하나의 묶음으로 다루는 메모리 공간
		 * 
		 * [ 특징 ]
		 * 1. 같은 타입 데이터만 저장 가능
		 * 2. 여러 변수에 해당하는 메모리 공간이 연속된 공간에 차례대로 생성됨
		 * 	=> 한 번 생성된 배열은 크기 변경 불가능
		 * 3. 기본 데이터타입과 참조 데이터타입 모두 배열로 사용 가능
		 * 4. 배열은 선언, 생성, 초기화의 3단계 과정을 거쳐서 사용
		 * 5. 배열 생성 시 각 공간에 해당하는 인덱스가 자동으로 부여됨
		 * 	=> 0부터 시작하여, 배열크기 -1까지 부여됨
		 * 6. 배열이 생성될 경우 배열의 데이터 저장 공간은
		 * 	배열의 데이터타입에 해당하는 기본값으로 자동으로 초기화
		 * 	(byte, short, int = 0, long = 0L, float = 0.0f, double = 0/0, char = 0 or '\u0000', boolean = false, String = null)
		 * 7. 배열의 이름을 사용하여 배열에 접근 가능
		 * 8. 배열의 크기는 배열명.length 속성을 통해 알아낼 수 있음
		 * 
		 * < 배열의 선언 기본 문법 >
		 * 데이터타입[] 변수명;
		 * => 변수 선언과 유사하나, 데이터타입 뒤에 [] 기호를 붙여 배열 표시
		 * => 배열 공간이 생성되기 전이므로,  아직 데이터 저장은 불가
		 * => 선언된 배열의 변수느  참조형 변수로 취급됨
		 * 	(int는 정수형이지만 int[]는 참조형)
		 * 
		 * < 배열의 생성 기본 문법 >
		 * 변수명 = new 데이터타입[배열크기];
		 * => new 키워드를 사용하여 배열 공간을 생성하는데
		 * 	데이터타입 뒤의 대괄호 안에 생성할 배열의 크기를 명시
		 * => 생성되는 배열의 위치를 선언된 배열 타입 변수에 저장
		 * => 실제 메모리 공간이 생성되었으므로 데이터 저장이 가능
		 * => 생성된 배열에는 자동으로 인덱스 번호가 부여됨
		 * 	(인덱스 번호는 0 ~ 배열크기 -1 까지 자동으로 부여됨)
		 * 
		 * < 배열 선언 및 생성을 하나의 문장으로 결합 >
		 * 데이터타입[] 변수명 = new 데이터타입[배열 크기];
		 * 
		 */
		
		// 1. 배열 선언 : 데이터타입[] 배열명;
		int[] score1; // => 선언만 하였을 시 아직 데이터를 저장할 수 있는 메모리 공간은 생성되기 전
		//score = 90;
		
		// 2. 배열 생성 : 변수명(배열명) = new 데이터타입[배열크기];
		score1 = new int[5];
		// 연속적인 int형 배열 공간 5개를 생성하고,
		// 해당 공간의 메모리 주소를 int[] 타입 변수 scroe에 저장
		// => 이 때, 5개의 메모리 공간에서는 각각의 인덱스 번호가 자동으로 부여됨
		//	(인덱스 번호는 0~4까지 부여됨)
		
		// 배열에 접근하여 각 배열 공간의 데이터 출력
		// => 배열명이 score 이므로 score[인덱스] 형식으로 접근
		System.out.println(score1); // 배열의 주소값 출력
		System.out.println(score1[0]); // 배열의 인덱스 0번 값을 출력
		System.out.println(Arrays.toString(score1)); // 배열 값 전체를 문자열화 하여 출력		
		
		int[] score = {90, 60, 80, 100, 50};
		System.out.println(Arrays.toString(score));
		int scoreTotal = 0;
		for(int i = 0; i < score.length; i++) scoreTotal += score[i];
		System.out.println(scoreTotal);
	}

}
