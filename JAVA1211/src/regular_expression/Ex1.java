package regular_expression;

import java.util.regex.Pattern;

public class Ex1 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		/*
		 * 정규표현식(Regular Expression, Regex, Regexp
		 * 
		 * 
		 * < 정규표현식에 사용되는 패턴 문자 = 메타 문자(Meta Character) >
		 * => 특정 글자, 숫자, 기호 등과 함께 앞, 뒤에 특수한 규칙의 기호를 붙여 패턴 지정
		 * 
		 * [ 일반적인 기호 ]
		 * 1. ^x : x로 시작하는 문자열인지 판별
		 * 	ex) "x", "xa", "xxx", "xab" 등(O)
		 * 	ex2) "y", "ax", "abx" 등 (X)
		 * 	ex3) ^홍 => "홍길동", "홍순이"(O), "김홍도"(X)
		 * 
		 * 2. x$ : x로 끝나는 문자열인지 판별
		 * 	ex) "x", "ax", "xxx", "abx" 등(O)
		 * 	ex2) "xa", "xab" 등(X)
		 *
		 * 만약 x로 시작해서 x로 끝나는 문자열의 경우(= x 1개만 존재하는 경우
		 * => ^x$ : "x"(O), "xy"(X), "x1"(X)
		 * 
		 * 3. .x : x 앞에 1개 이상의 문자가 포함되는 문자열
		 *  ex) "ax", "bx", "abxy" 등(O)
		 *  ex2) "xa", "xb", "x" 등(X)
		 * 
		 * 4. x+ : x가 1번 이상 반복되는 문자열
		 * 	ex) "x", "xx", "xxx" 등(O)
		 * 	ex2) "a", "" 등(X)
		 * 
		 * 5. x* : x가 0번 이상 반복되는 문자열
		 * 	ex) "", "a", "x", "xx", "xxx" 등(O)
		 * 	=> 주로 다른 패턴과 결합하여 사용
		 * 
		 * 6. x? : x가 나올수도 있고, 나오지 않을 수도 있는 문자열
		 * 	ex) "x", "", "a" 등(O)
		 * 	=> 주로 다른 패턴과 결합하여 사용
		 * 
		 * 7. x|y : x 또는 y가 포함되는 문자열
		 * ex) "x", "y", "xy", "ax", "yb" 등(O)
		 * 
		 *
		 * [ 예시 ]
		 * 1) xa?y$
		 * 	- 시작되는 문자열은 상관없음
		 * 	- 문자열 내에서 x뒤에 a가 올 수도 있고 안 올수도 있음
		 *  - 마지막은 반드시 y로 끝나야함
		 *  ex) "xy"(O) => x가 포함되고, x뒤에 a는 없지만 y로 끝나는 문자열
		 *  ex2) "xay"(O) => x뒤에 a가 있고, y로 끝나는 문자열
		 *  ex3) "hixy"(O) => 첫번째 항목과 동일(시작은 상관없음) 
		 *  ex4) "hixzy"(X) => x와 y 사이의 문자는 a여야만 함
		 *  ex5) "xyz"(X) => x 뒤에 y가 있지만, y로 끝나지 않으면 안됨
		 *  
		 * 2) x|a?y$
		 * 	- 시작되는 문자열은 상관없음
		 * 	- 문자열 내에서 x가 포함되거나 a?y$인 문자열
		 * 	ex) "xy"(O) => x가 포함됨
		 * 	ex) "ayz"(X) => a 뒤에 y가 있지만, y로 끝나지 않으면 안됨
		 * 
		 * 
		 * 
		 * [ 괄호 문자 ]
		 * 1. (xy) : 소괄호 안의 내용(xy)이 그대로 포함되는 문자열(괄호안의 문자열 그룹화)
		 * 	ex) "xy"(O), "yx"(X), "axy"(O)
		 * 
		 * 2. x{n} : x가 n번 만큼 반복되는 문자열(정확히 n번만 반복)
		 *  ex) x{5} => "xxxxx"(O), "xxx"(X)
		 *  ex2) a1{5} => "a1a1a1a1a1"(O)
		 *  
		 * 3. x{n,} : n번 이상 반복되는 문자열
		 * 	ex) x{3,} : 최소 x가 3번 이상 반복되어야 함
		 * 		=> "xxx"(O), "xxxx"(O), "xx"(X)
		 * 
		 * 4. x{n,m} : x가 n번 이상, m번 이하 반복되는 문자열
		 * 	ex) x{2,4} : x가 2번 이상, 4번 이하 반복
		 * 		=> "xx"(O), "xxxx"(O), "xxxxx"(X)
		 * 
		 * 5. 대괄호[]는 괄호 내의 구성요소를 확인하는 용도로 사용
		 * 	(괄호 안의 내용 중 하나 이상을 확인)
		 * 5-1. [x] : x를 1개 포함하는 문자열
		 * 5-2. [xy] : x또는 y가 1개 포함되는 문자열
		 * 5-3. [^x] : x가 포함되지 않은 문자열(대괄호 안에서 ^사용 시 부정의 의미)
		 * 5-4. [x-y] : x부터 y까지의 문자 중 1개 포함하는 문자열
		 * 	ex) [A-Z] : 대문자 A부터 Z까지 중 1개 문자를 포함하는 문자열
		 * 	=> 주로 중괄호{}(반복횟수 지정)와 조합하여 사용됨
		 * 	ex) [가-힣]{2,5} : 한글 2 ~ 5글자(주로 이름 입력 확인 용도)
		 * 	ex) [A-Za-z]{2,8} : 영문자(대소문자) 2 ~ 8 글자
		 *  ex) [A-Za-z0-9!@#$]{8,16} : 영문자 또는 숫자 또는 특수문자(!@#$) 8 ~16 글자
		 *  ex) 식별자 작성 규칙을 정규표현식으로 표현
		 *  	1) 첫글자 숫자 사용 불가(영문자, 한글, 특수문자 $ 또는 _ 만 사용)
		 *  	2) 특수문자 $ 또는 _ 만 사용
		 *  	3) 예약어 사용 불가(정규표현식으로 판별 불가)
		 *  	4) 대소문자 판별(정규표현식으로 판별 불가)
		 *  	=> 1번과 2번 규칙을 적용하여 정규표현식으로 나타낼 경우
		 *  		"^[A-Za-z가-힣$_][A-Za-z가-힣0-9$_]{0,}$"
		 *  
		 *  
		 *  [ 예외 문자 ]
		 *  \^ : ^기호를 시작 기호로 인식하지 않고, 일반 특수문자로 인식
		 *  \d : 숫자 1개([0-9]와 동일)
		 *  \D : 숫자가 아닌 것 1개([^0-9]와 동일)
		 *  \s : 공백 문자
		 *  \S : 공백이 아닌 문자
		 *  \w : 영단어를 구성하는 요소 1개(알파벳, 숫자, _)
		 *  \W : 영단어가 아닌 구성요소 1개
		 *  
		 *  
		 *  < 유용한 정규표현식 예 >
		 *  1. 한글이름(2글자 ~ 5글자 사이) : ^[가-힣]{2,5}$
		 *  2. 휴대폰 번호 : ^(010|011)[-\s]?\d{3,4}[-\s]?\d{4}$
		 *  	1) 010 또는 011로 시작
		 *  	2) 전화번호 사이는 - 기호 또는 공백이 포함될 수도 있고, 포함되지 않을 수도 있음
		 *  	3) 두번째 자리는 3자리 또는 4자리 숫자
		 *  	4) 마지막 자리는 4자리 숫자로 끝
		 *  
		 *  
		 *  정규 표현식을 활용하는 클래스
		 *  1. java.util.regex.Pattern 클래스
		 *  - 정규표현식 문자열을 컴파일한 후 객체로 관리
		 *  - 해당 객체를 활용하여 전체 문자열이 정규표현식과 일치하는지 판별
		 *  	ex) 전화번호 형식 검증, 패스워드 길이 규칙 검증 등
		 *  		=> 단, 패스워드 복잡도 검사 등의 부분 규칙 검사 불가
		 *  - 공개된 생성자가 없으며, Pattern 클래스의 static 메서드인
		 *  	compile() 메서드를 통해 객체를 리턴받아 사용
		 *  - Pattern 클래스의 static 메서드인 matches() 메서드를 사용하여
		 *  	정규표현식과 일치하는지 판별 가능
		 */ 
		
		// ------------------------------ Pattern 클래스 활용 -------------------------------------
		// 1. 한글 이름(2~5글자) 검증
		String name = "홍길동";
		String nameRegex = "^[가-힣]{2,5}$";
		
		if(Pattern.matches(nameRegex, name)) {
			System.out.println("올바른 한글이름");
		} else {
			System.out.println("잘못된 한글이름");
		}
		
		// 2. 전화번호 검증
		// 2-1) 전화번호 검증에 사용할 정규표현식 작성
		String phoneRegex = "^(010|011)[-\\s]?\\d{3,4}[-\\s]?\\d{4}$";
		String phoneNum = "010-2223-3333";
		
		// 2-2) Pattern 클래스의 matches() 메서드를 사용하여 판별
		//		파라미터 : 정규표현식 문자열, 검증할 원본 문자열
		//		리턴타입 : boolean
		//		=> 해당 원본 문자열이 정규표현식에 부합되는지 여부 리턴
		if(Pattern.matches(phoneRegex, phoneNum)) {
			System.out.println("올바른 전화번호");
		} else {
			System.out.println("잘못된 전화번호");
		}
	}

}
